// @strict-types
#Область ПрограммныйИнтерфейс

Функция ПолучитьIDПриложения() Экспорт

	ИдентификаторДанныеДляИнтеграции_Настройки = ВК_ИнтеграцияКлиентСервер.ИдентификаторДанныеДляИнтеграции_Настройки();
	ПараметрIDПриложения = ВК_ИнтеграцияКлиентСервер.ИмяПараметраIDПриложения();

	IDПриложения = ВК_ОбщегоНазначения.ПолучитьПредопределенноеЗначение(ИдентификаторДанныеДляИнтеграции_Настройки,
		ПараметрIDПриложения);

	Если Не ЗначениеЗаполнено(IDПриложения) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр(
			"ru='Не указан ID приложения, обратитесь к администратору, или введите его руками!'"));
	КонецЕсли;

	Возврат IDПриложения;

КонецФункции

Процедура СохранитьТокен(Токен = "") Экспорт

	Если ЗначениеЗаполнено(Токен) Тогда
		ИдентификаторДанныеДляИнтеграции_Настройки = ВК_ИнтеграцияКлиентСервер.ИдентификаторДанныеДляИнтеграции_Настройки();
		ПараметрТокен = ВК_ИнтеграцияКлиентСервер.ИмяПараметраТокен();

		НаборЗаписей = РегистрыСведений.ВК_ЗначенияИдентификаторовПредопределенныхЗначений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Идентификатор.Установить(ИдентификаторДанныеДляИнтеграции_Настройки);
		НаборЗаписей.Отбор.Параметр.Установить(ПараметрТокен);
		НаборЗаписей.Прочитать();

		Если НаборЗаписей.Количество() Тогда
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.Значение = Токен;
			КонецЦикла;
		Иначе
			Запись = НаборЗаписей.Добавить();
			Запись.Идентификатор = ИдентификаторДанныеДляИнтеграции_Настройки;
			Запись.Параметр = ПараметрТокен;
			Запись.Значение = Токен;
		КонецЕсли;
		
		НаборЗаписей.Записать(Истина);
	КонецЕсли;

КонецПроцедуры

// Подключение к аккаунту по токену.
// 
// Параметры:
//  Токен - Строка
// 
// Возвращаемое значение:
//  Структура - Параметры подключения к аккаунту по токену:
//  * ПараметрыHTTPСоединение - Структура, Неопределено -
//	* ОписаниеОшибок - Массив из Строка -
//  * АвторизацияВыполнена - Булево -
Функция ПолучитьИнформацияОСтраницеПоТокену(Токен) Экспорт
	
	ПараметрыПодключения = ПараметрыПодключения();
	
	Если НЕ ТипЗнч(Токен) = Тип("Строка") Тогда
		ПараметрыПодключения.ОписаниеОшибок.Добавить(НСтр("ru = 'Введен некорректный токен.'"));
		Возврат ПараметрыПодключения;
	КонецЕсли;
	
	ПараметрыКПодключению = ВК_ИнтеграцияКлиентСервер.ПараметрыКПодключениюКHTTPСерверу();	
	ЗаполнитьПараметрыПодключения(ПараметрыКПодключению);
	
	ПараметрыHTTPСоединение = ВК_ОбщегоНазначения.ПодключениеКHTTPСоединению(ПараметрыКПодключению);
	
	Если ПараметрыHTTPСоединение.Соединение = Неопределено Тогда
		ПараметрыПодключения.ОписаниеОшибок.Добавить(ПараметрыHTTPСоединение.Ошибка);
		Возврат ПараметрыПодключения;		
	КонецЕсли;
		
	ИмяМетодаПолучениеИнформацииОПрофиле = ВК_ИнтеграцияКлиентСервер.ИмяМетодаПолучениеИнформацииОПрофиле();
	HTTPЗапрос = ВК_ОбщегоНазначения.НовыйHTTPЗапрос(ИмяМетодаПолучениеИнформацииОПрофиле);
	
	Если HTTPЗапрос = Неопределено Тогда
		ПараметрыПодключения.ОписаниеОшибок.Добавить(НСтр("ru = 'Не удалось создать HTTP запрос на подключение.'"));
		Возврат ПараметрыПодключения;
	КонецЕсли;
	
	ПараметрыПодключения.ПараметрыHTTPСоединение = ПараметрыHTTPСоединение;
	ПараметрыПодключения.АвторизацияВыполнена = Истина;
	 
	Возврат ПараметрыПодключения;	
	
КонецФункции

#КонецОбласти

//@skip-check module-region-empty
#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьПараметрыПодключения(ПараметрыКПодключению) Экспорт
	
	ИдентификаторДанныеДляИнтеграции_НастройкиПодключенияКСерверу = ВК_ИнтеграцияКлиентСервер.ИдентификаторДанныеДляИнтеграции_НастройкиПодключенияКСерверу();
	СоответствиеПараметров = ВК_ОбщегоНазначения.ПолучитьСоответствиеПараметровПредопределенныхЗначений(ИдентификаторДанныеДляИнтеграции_НастройкиПодключенияКСерверу);
	
	Для Каждого ПараметрПодключения Из ПараметрыКПодключению Цикл
		КлючПараметра = ПараметрПодключения.Ключ;
		ПараметрыКПодключению[КлючПараметра] = СоответствиеПараметров[КлючПараметра]; 
	КонецЦикла;	
	
КонецПроцедуры

Функция ПараметрыПодключения() Экспорт
	
	СтруктураПараметров = Новый Структура();
	
	ОписаниеОшибок = Новый Массив(); // Массив из Строка
	
	СтруктураПараметров.Вставить("ПараметрыHTTPСоединение", Неопределено);
	СтруктураПараметров.Вставить("ОписаниеОшибок", ОписаниеОшибок); 
	СтруктураПараметров.Вставить("АвторизацияВыполнена", Ложь);
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ВерсияАпи() Экспорт

	ИдентификаторДанныеДляИнтеграции_НастройкиПодключенияКСерверу = ВК_ИнтеграцияКлиентСервер.ИдентификаторДанныеДляИнтеграции_НастройкиПодключенияКСерверу();
	ПараметрВерсияАПИ = ВК_ИнтеграцияКлиентСервер.ИмяПараметраВерсияАПИ();
	
	Возврат ВК_ОбщегоНазначения.ПолучитьПредопределенноеЗначение(ИдентификаторДанныеДляИнтеграции_НастройкиПодключенияКСерверу, 
		ПараметрВерсияАПИ);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти