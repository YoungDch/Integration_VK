// @strict-types
#Область ПрограммныйИнтерфейс

// Получить предопределенное значение.
// 
// Параметры:
//  Идентификатор - СправочникСсылка.ВК_ИдентификаторыПредопределенныхЗначений
//  Параметр - Строка
// 
// Возвращаемое значение:
//  ЛюбаяСсылка, Строка - возвращает значение, которое указано в параметре
Функция ПолучитьПредопределенноеЗначение(Идентификатор, Параметр) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВК_ЗначенияИдентификаторовПредопределенныхЗначений.Значение
	|ИЗ
	|	РегистрСведений.ВК_ЗначенияИдентификаторовПредопределенныхЗначений КАК
	|		ВК_ЗначенияИдентификаторовПредопределенныхЗначений
	|ГДЕ
	|	ВК_ЗначенияИдентификаторовПредопределенныхЗначений.Идентификатор = &Идентификатор
	|	И ВК_ЗначенияИдентификаторовПредопределенныхЗначений.Параметр = &Параметр";

	Запрос.УстановитьПараметр("Параметр", Параметр);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);

	РезультатЗапроса = Запрос.Выполнить();

	УстановитьПривилегированныйРежим(Ложь);

	Выборка = РезультатЗапроса.Выбрать();

	Выборка.Следующий();

	//@skip-check property-return-type
	Если ЗначениеЗаполнено(Выборка.Значение) Тогда
		//@skip-check variable-value-type
		ЗначениеИдентификатора = Выборка.Значение;
	Иначе
		ЗначениеИдентификатора = Неопределено;
	КонецЕсли;

	Возврат ЗначениеИдентификатора;

КонецФункции

// Получить предопределенное значение.
// 
// Параметры:
//  Идентификатор - СправочникСсылка.ВК_ИдентификаторыПредопределенныхЗначений
//  Параметр - Строка
// 
// Возвращаемое значение:
//  Соответствие - возвращает значение, которое указано в параметре
Функция ПолучитьСоответствиеПараметровПредопределенныхЗначений(Идентификатор) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
				   |	ВК_ЗначенияИдентификаторовПредопределенныхЗначений.Параметр,
				   |	ВК_ЗначенияИдентификаторовПредопределенныхЗначений.Значение
				   |ИЗ
				   |	РегистрСведений.ВК_ЗначенияИдентификаторовПредопределенныхЗначений КАК
				   |		ВК_ЗначенияИдентификаторовПредопределенныхЗначений
				   |ГДЕ
				   |	ВК_ЗначенияИдентификаторовПредопределенныхЗначений.Идентификатор = &Идентификатор";

	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);

	РезультатЗапроса = Запрос.Выполнить();

	УстановитьПривилегированныйРежим(Ложь);

	Выборка = РезультатЗапроса.Выбрать();

	СоответствиеПараметров = Новый Соответствие();

	Пока Выборка.Следующий() Цикл
		//@skip-check property-return-type
		СоответствиеПараметров.Вставить(Выборка.Параметр, Выборка.Значение);
	КонецЦикла;

	Возврат СоответствиеПараметров;

КонецФункции

// Подключение КHTTPСоединению.
// 
// Параметры:
//  ПараметрыПодключения - Структура:
//  * Сервер - Строка
//  * Порт - Строка
//  * ЗащитноеСоединение - Булево
// 
// Возвращаемое значение:
//  Неопределено, HTTPСоединение - Подключение К HTTP Соединению
Функция ПодключениеКHTTPСоединению(ПараметрыПодключения) Экспорт

	ПараметрыHTTPСоединению = ПараметрыHTTPСоединению();
	ИнформацияОбОшибке = "";

	Попытка
		HTTPСоединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер, ПараметрыПодключения.Порт, , , ,
			ПараметрыПодключения.ЗащитноеСоединение);
	Исключение
		HTTPСоединение = Неопределено;
		ИмяСобытия = ИмяСобытияДляЖурналаРегистрации();
		//@skip-check object-deprecated
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

		ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Обработки.ВК_ИнтерактивноеОкно, , ИнформацияОбОшибке);
	КонецПопытки;

	ПараметрыHTTPСоединению.Соединение = HTTPСоединение;
	ПараметрыHTTPСоединению.Ошибка = ИнформацияОбОшибке;

	Возврат ПараметрыHTTPСоединению;

КонецФункции

// Новый HTTPЗапрос.
// 
// Параметры:
//  Адрес - Строка
//  Заголовки - Соответствие
//  ВерсияАПИ - Строка
// 
// Возвращаемое значение:
//  Неопределено, HTTPЗапрос - Новый HTTPЗапрос
Функция НовыйHTTPЗапрос(Адрес, Заголовки = Неопределено, ВерсияАПИ = Неопределено) Экспорт
	
	HTTPЗапрос = Неопределено;

	Если ВерсияАПИ = Неопределено Тогда
		ВерсияАПИ = ВК_ИнтеграцияКлиентСервер.ВерсияАПИ();
	КонецЕсли;

	АдресШаблон = СтрШаблон(Адрес + "?v=%1", ВерсияАПИ);

	Если ЗначениеЗаполнено(ВерсияАПИ) Тогда
		Попытка
			HTTPЗапрос = Новый HTTPЗапрос(АдресШаблон, Заголовки);
		Исключение
			HTTPЗапрос = Неопределено;

			ИмяСобытия = ИмяСобытияДляЖурналаРегистрации();
			//@skip-check object-deprecated
			ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

			ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Обработки.ВК_ИнтерактивноеОкно, 
				, 
				ИнформацияОбОшибке);
		КонецПопытки;
	КонецЕсли;
	
	Возврат HTTPЗапрос;
	
КонецФункции

// В к интерактивное окно реквизиты к заполнению.
// 
// Возвращаемое значение:
//  Массив - В к интерактивное окно реквизиты к заполнению
Функция ВК_ИнтерактивноеОкно_РеквизитыКЗаполнению() Экспорт

	РеквизитыКЗаполнению = Новый Массив(); // Массив из Строка

	РеквизитыКЗаполнению.Добавить(ВК_ИнтеграцияКлиентСервер.ИмяПараметраТокен());

	Возврат РеквизитыКЗаполнению;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ИмяСобытияДляЖурналаРегистрации() Экспорт

	Возврат "ВК_Интеграция";

КонецФункции

// Параметры HTTPСоединению.
// 
// Возвращаемое значение:
//  Структура - Параметры HTTPСоединению:
// * Соединение - Неопределено -
// * Ошибка - Строка -
Функция ПараметрыHTTPСоединению() Экспорт

	ПараметрыHTTPСоединению = Новый Структура();

	ПараметрыHTTPСоединению.Вставить("Соединение", Неопределено);
	ПараметрыHTTPСоединению.Вставить("Ошибка", "");

	Возврат ПараметрыHTTPСоединению;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Код процедур и функций

#КонецОбласти